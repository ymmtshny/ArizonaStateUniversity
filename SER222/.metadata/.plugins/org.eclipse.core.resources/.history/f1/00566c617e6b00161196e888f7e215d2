import java.util.*;
import java.io.*;

/**
 * MazeTester uses recursion to determine if a maze can be traversed.
 *
 * @author Lewis and Chase
 * @version 4.0
 */
public class MazeTester
{
	/**
	 * Creates a new maze, prints its original form, attempts to
	 * solve it, and prints out its final form.
	 */
	public static void main(String[] args) throws FileNotFoundException
	{
		Scanner scan = new Scanner(System.in);
		System.out.print("Enter the name of the file containing the maze: ");
		String filename = scan.nextLine();

		Maze labyrinth = new Maze(filename);
		System.out.println(labyrinth);

		System.out.print("Enter the starting position (two integers separated by a comma):");
		String startPoint = scan.nextLine();

		System.out.print("Enter the end position (two integers separated by a comma):");
		String endPoaint = scan.nextLine();

		int[] intArray = getIntArrayFromCommaSeparatedString(startPoint);
		System.out.print(intArray[0]);
		System.out.print("StartPoint is " + startPoint);
		System.out.print("EndPoint is " + endPoaint);
		

		MazeSolver solver = new MazeSolver(labyrinth);

		if (solver.traverse())
			System.out.println("The maze was successfully traversed!");
		else
			System.out.println("There is no possible path.");

		System.out.println(labyrinth);
		solver.printSolvedPath();
	}

	public static int[] getIntArrayFromCommaSeparatedString(String input) {
		String[] strArray = input.split(",");
		int[] intArray = new int[strArray.length];
		for(int i = 0; i < strArray.length; i++) {
			intArray[i] = Integer.parseInt(strArray[i]);
		}
		return intArray;
	}
}
